/*********************************************************************************/
/* When working with color values it can sometimes be useful to extract the      */
/* individual red, green, and blue (RGB) component values for a color.           */
/* Implement a function that meets these requirements:                           */
/*         + Accepts a case-insensitive hexadecimal color string                 */
/*            as its parameter (ex. "#FF9933" or "#ff9933")                      */
/*         + Returns a Map<String, int> with the structure                       */
/*            {r: 255, g: 153, b: 51} where r, g, and b range from 0 through 255 */
/*********************************************************************************/


#include <criterion/criterion.h>

typedef struct {
        int r, g, b;
} rgb;

int hex_to_int(const char * hex)
{
	return 0;
}

rgb hex_str_to_rgb(const char *hex_str)
{
	for (int i = 0; hex_str[i]; ++i) {
		
	}
}

int rgb_eq(rgb x, rgb y)
{	
	if (x.r == y.r &&
	    x.g == y.g &&
	    x.b == y.b)
		return 1;
	else
		return 0;
}

void tester(const char *hex_str, rgb expected)
{
	rgb actual = hex_to_rgb(hex_str);
	cr_assert(rbg_eq(actual, expected));
}

Test(Sample_Tests, should_pass_all_the_tests_provided) {
        {
                const char *hex_str = "#FF9933";
                rgb expected = {255, 153, 51};
                tester(hex_str, expected);    
        }
        {
                const char *hex_str = "#beaded";
                rgb expected = {190, 173, 237};
                tester(hex_str, expected);    
        }
        {
                const char *hex_str = "#000000";
                rgb expected = {0, 0, 0};
                tester(hex_str, expected);    
        }
        {
                const char *hex_str = "#111111";
                rgb expected = {17, 17, 17};
                tester(hex_str, expected);    
        }
        {
                const char *hex_str = "#Fa3456";
                rgb expected = {250, 52, 86};
                tester(hex_str, expected);    
        }
}
