/***********************************************************************************************/
/* Given two integers dividend and divisor, divide two integers without using		       */
/*     multiplication, division, and mod operator.					       */
/* The integer division should truncate toward zero, which means losing its		       */
/*     fractional part. For example, 8.345 would be truncated to 8, and -2.7335		       */
/*     would be truncated to -2.							       */
/* Note: Assume we are dealing with an environment that could only store integers within       */
/* the 32-bit signed integer range: [−2**31, 2**31 − 1]. For this problem, if the quotient is  */
/*     strictly greater than 2**31 - 1, then return 2**31 - 1, and if the quotient is strictly */
/*     less than -2**31, then return -2**31.						       */
/***********************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int sign(a, b)
    int a, b;
    {
    int ret = 1;
    if (a < 0)
	ret *= -1;
    if (b < 0)
	ret *= -1;
    return (ret);
    }

/*
 * This is egridiously ineffecient, the actual answer 
 * should use bitshifts like in 
 * https://leetcode.com/problems/divide-two-integers/discuss/13420/32-times-bit-shift-operation-in-C-with-O(1)-solution
 * but since I suck with bitshift, and this *kind of* works, I'll leave like this,
 * professional at work.
 */
int divide(dend, sor)
    int dend, sor;
    {
    if (dend == 0)
	return (0);
    int sgn = sign(dend, sor),
	res = 0;
    dend = abs(dend);
    sor = abs(sor);

    while(0 <= (dend-sor))
	{
	dend -= sor;
	res++;
	if (INT_MAX < res)
	    return (INT_MAX);
	}
    return (res*sgn);
    }

int main()
    {
    int x = -1324,
	y = 17,
	res = 0;
   
    res = divide(x,y);
    printf("%d/%d: %d\n", x, y, res);
    }
