(* TODO: make the function return tuples *)

let powerset a b =
  let rec aux x y acc =
    match y with
    | [] -> acc
    | h :: t -> aux x t ((x, h) :: acc)
  in
  let rec aux_two x y acc =
    match x with
    | [] -> acc
    | h :: t -> aux_two t y ((aux h y []) :: acc)
  in
  aux_two a b []
;;

let rec printlist l =
  let rec print_aux = function
    | [] -> ()
    | (a, b) :: c ->
       Printf.printf "(%d, %d) " a b;
       print_aux c
  in
  match l with
  | [] -> ()
  | x :: xs ->
     print_aux x;
     Printf.printf "\n";
     printlist xs
;;

let main =
  let foo = [1; 2; 3; 4; 5] in
  let bar = [6; 7; 8; 9; 10] in
  let qux = powerset foo bar in
  printlist qux
;;
