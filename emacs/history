;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(junk-hist input-method-history gud-gdb-history minibuffer-history-search-history command-history regexp-history regexp-search-ring tex-compile-history read-char-history magit-revision-history grep-history query-replace-history shell-command-history read-expression-history string-rectangle-history Man-topic-history face-name-history compile-history yes-or-no-p-history c-set-style-history empty-history minibuffer-history buffer-name-history file-name-history extended-command-history))
(setq gud-gdb-history '("gdb -i=mi main"))
(setq command-history '((execute-extended-command nil "load-theme" "load-the") (find-file "~/.config/emacs/init.el" t) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (load-theme 'base16-tokyo-city-terminal-dark nil nil) (execute-extended-command nil "load-theme" "load-them") (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (julia-repl) (execute-extended-command nil "julia-repl" "julia-repl") (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (find-file "~/Programming/Projs/Euler-Project/11/" t) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil) (compile "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" nil)))
(setq regexp-search-ring '(#("theme" 0 5 (isearch-case-fold-search t)) #("them" 0 4 (isearch-case-fold-search t)) #("readread" 0 8 (isearch-case-fold-search t)) #("pai" 0 3 (isearch-case-fold-search t)) #("comp" 0 4 (isearch-case-fold-search t)) #("nyan	" 0 5 (isearch-case-fold-search t)) #("late" 0 4 (isearch-case-fold-search t)) #("font" 0 4 (isearch-case-fold-search t)) #("the	" 0 4 (isearch-case-fold-search t)) #("or" 0 2 (isearch-case-fold-search t)) #("mod" 0 3 (isearch-case-fold-search t)) #("&&" 0 2 (isearch-case-fold-search t)) #("Julia" 0 5 (isearch-case-fold-search nil)) #("julia" 0 5 (isearch-case-fold-search t)) #("nyan" 0 4 (isearch-case-fold-search t)) #("fon" 0 3 (isearch-case-fold-search t))))
(setq tex-compile-history '("pdflatex \\\\nonstopmode\\\\input ULIBARRI_12B_TAREA2.tex"))
(setq read-char-history '("/" ")" "1" ";" "]"))
(setq magit-revision-history '("main" "master" "README" "master"))
(setq grep-history '("grep --color -nH --null -e TODO"))
(setq query-replace-history '(" " "," "compile-file" "set-compile-file" "-\\frac{1}{i}(2+1 - (1+i)x)" "y" "8cis54" "z_4" "(4,-6)" "z_3" "(3+5i)" "z_2" "9cis30" "z_1" "z_!" "$, $" "," "overline" "bar" "docker compose" "docker-compose" "\"" "'" "\", \" \"), " "\"" " " "/" "alph" "chars" "4" "0" "3" "0" "2" "0" "1" "0" "" ")" "" "(" "3" "0" "3" "2" "2" "0" "1" "0" "Proposición" "Propocisión" "align*" "align" "49" "7" "3" "2" "PlayingCard" "pCard" "King" "Ace" "Queen" "Ace" "Jack" "Ace" "r" "right" "l" "left" "isOk" "isok" "\\neg " "~" "\\neg" "~" "\\lor" "v" "\\land" "^" "\\rightarrow" #("→" 0 1 (rear-nonsticky t face tex-math)) "∧" "^" "^" "∨" "v" "¬" "~" "∧" "^" "^" "∨" "v" "^" "act" "exp" "llu" "ull" "lh" "ls"))
(setq shell-command-history '("ocaml" "gcc -o foo foo.c && ./foo" "runhaskell " "runhaskell bsort.hs " "runhaskell foo.hs " "mupdf presentation.pdf " "open presentation.pdf " "dune exec replicate" "utop -emacs" "dune init proj replicate" "rm foo*" "./foo" "clang -Wall -Wextra -pedantic --std=c11 -o foo foo.c" "ls" "utop -emacs" "dune " "rm -rf foo/" "utop -emacs" "mv ULIBARRI_IÑAKI_12B_TAREA2.pdfg ULIBARRI_IÑAKI_12B_TAREA.pdf" "mv ULIBARRI_IÑAKI_12B_TAREA.pdf ULIBARRI_IÑAKI_12B_TAREA2.pdfg" "mv tarea2/" "luk" "dune init proj test" "utop -emacs"))
(setq read-expression-history '("(global-set-key \"\\M-w\" 'clipboard-kill-ring-save)" "1ASC-Liberation Mono-bold-normal-normal 20"))
(setq string-rectangle-history '("Test." ";" "foo" " 0123456789" ";" "Constitución Política de los Estado Unidos Mexicanos, (2022), Artículo .Estados Unidos Mexicanos. " "\\item " " " "g" "-" "g" "&" "g" "&" "g" "$" "& " "$" "\\item " "calloc(35, sizeof(char));" "luk" "puz"))
(setq Man-topic-history '("snprintf" "calloc" "strlen(3)" "ascii" "isalnum" "isalpha" "ascii" "ctype" "ascii" "memset" "strsep(3)" "strlen" "strleen" "atoi" "strncpy" "strncpy_s" "perror" "strncpy" "toupper" "strncpy" "fgets" "strncpy" "fgets" "strcmp"))
(setq face-name-history '("all faces"))
(setq compile-history '("julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jlç" "julia /home/inaki/Programming/Projs/Euler-Project/11/11.jl" "julia /home/inaki/foo.jl" "julia /home/inaki/.config/emacs/foo.jl" "julia foo.jl " "julia 10.jl " "make -k " "runhaskell 10.hs" "runhaskell 10.hs " "runhaskell foo.hs " "runhaskell foo." "runhaskell 9.hs " "racket fizzbuzz.rkt " "runhaskell 7.hs " "ocamlrun foo.ml " "runhaskell template.hs " "runhaskell template." "runhaskell foo.hs " "runhaskell 7.hs " "runhaskell 6.hs " "julia 5.jl " "runhaskell 3.hs " "make -k " "runhaskell 2.hs " "runhaskell 1.hs " "ghci 1.hs " "make -k " "julia main.jl " "julia playing_with_digits.jl " "julia mc_1.jl " "make -k " "julia mc_1.jl " "make -k " "julia mc_1.jl " "julia coins_sums.jl " "make -k " "julia coins_sums.jl " "pandoc comprension.org -o comprénsion.pdf" "dot -Tpng /home/inaki/tarea_12/Derecho/4/Mercantil.gv -o /home/inaki/tarea_12/Derecho/4/Mercantil.png
" "neato -Tpng /home/inaki/tarea_12/Derecho/4/Mercantil.gv -o /home/inaki/tarea_12/Derecho/4/Mercantil.png
" "dot -Tpng /home/inaki/tarea_12/Derecho/4/Mercantil.gv -o /home/inaki/tarea_12/Derecho/4/Mercantil.png" "julia coins_sums.jl " "julia foo.jl " "pandoc 25_preguntas.md -o 25_preguntas.pdf" "pandoc foo.tex -o foo.pdf" "pdflatex foo.tex -o foo.pdf" "pandoc foo.tex -o foo.pdf" "pandoc foo.md -o foo.pdf" "pandoc foo.pdf -o foo.md" "pandoc foo.md -o foo.pdf" "pandoc sincrónica.md -o ulibarri_asincrónica.pdf" "pandoc sincrónica.md -o sincrónica.pdf" "pandoc sincrónica.md -o sincrónica.pndf" "pandoc Trabajo.org -o Trabajo.pdf" "make -k " "pandoc ejercicio_nomenclatura.md -o ejercicio_nomenclatura.pdf" "julia --sysimage=sysim_plots.so Ejemplo.jl" "julia gráfica.jl " "make -k " "julia -i gráfica.jl " "julia gráfica.jl " "make -k " "julia foo.jl " "julia  main.jl " "julia main.jl " "make -k " "julia main.jl " "julia main.jl" "julia main.jl 2" "julia main.jl " "make show" "make -k " "make show" "make -k " "make show" "make" "make -k " "make run" "make -k" "make run" "make -k run" "make -k " "make -k run" "make -k " "ocamlc -o fib fib.ml" "make -k foo" "make -k " "clang -Wall -Wextra -pedantic -o axel axel.c" "make -k " "clang -Wall -Wextra -pedantic -o foo foo.c" "clang -Wall -Wextra -pedantic -o foo foo.x" "make -k " "dune" "make -k" "make -k && ./sopas " "make -k " "make -k && ./tests " "make -k "))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "ues" "yes" "no" "yes" "no" "yes" "ues" "yes" "ye" "yes" "no" "yes" "yyes" "yes" "no" "yes" "no" "ni" "yes" "no" "yes" "ye" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "n" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "ues" "no" "yes" "y" "yes" "no" "yes" "no"))
(setq c-set-style-history '("openbsd" "gnu" "openbsd" "whitesmith" "stroustrup" "ellemtel" "user" "openbsd" "gnu"))
(setq minibuffer-history '("base16-tokyo-city-terminal-dark" "julia-repl" "base16-tokyo-city-dark" "next-error" "DOT OPERATOR" "interpreter-mode-alist" "prettify-symbols-alist" "racket-mode" "compile-command" "compile" "interpreter-mode-alist" "foo.hs" "paren-showing" "latex-unicode-math-mode" "foo.hs" "zenburn" "zip" "take" "split" "divMod" "16" "nyan-start-music" "8" "use-package" "dired-sidebar" "dockerfile-mode" "yaml-mode" "41" "zap-to-char" "123" "\"" "foo.jl" "26" "Errésimo.tec" "oceanic" "oceanic-theme" "base16-phd" "andreas" "adwaita" "65" "41" "3" "27" "main.jl" "242" "=" "==" "interactive-haskell-mode" "haskell-mode" "-1ASC-Liberation Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1" "BLACK DIAMOND MINUS WHITE X" "foldl" "BLACK DIAMOND MINUS WHITE X" "DIAMOND OPERATOR" "BLACK DIAMOND MINUS WHITE X" "BLACK DIAMOND SUIT" "=" "\"" "10" "=" "-UNKN-ProFontWindows-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1" "-CF  -Space Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1" "=" "haskell-mode" "RIGHT POINTING GUILLEMET" "LEFT POINTING GUILLEMET" "markdown-mode-20221105.236" "markdown-mode" "LOGICAL OR" "LOGICAL AND" "LOGICAL OR" "insert-char" "LOGICAL OR" "38" "32" "13" "22" "11" "13" "39" "31" "23" "11" "\"" "18" "22" "foo.c" "vterm-20221019.641" "vterm-toggle-20220820.1608" "vterm-20221019.641" "julia-snail-20220927.704" "utop" "markdown-mode" "julia-snail" "vterm-toggle" "vterm" "DIVISION SIGN" "40" "84" "42"))
(setq buffer-name-history '("foo.jl" "*Backtrace*" "foo.jl" "*compilation*" "10.hs" "init.el" "10.hs" "*Ibuffer*" "*compilation*" "*Help*" "init.el" "*compilation*" "7.hs" "bar.hs" "foo.hs" "foo.ml" "foo.hs" "haskell-mode<haskell-mode>" "foo.hs" "haskell-mode" "haskell-mode<haskell-mode>" "foo.hs" "haskell-mode<haskell-mode>" "foo.hs" "*scratch*" "haskell-mode<haskell-mode>" "9.hs" "*haskell*" "haskell-mode<haskell-mode>" ".emacs" "*Racket REPL </>*" "foo.ml" "*OCaml*" "foo.ml" "foo.hs" "7.hs" "foo.c" ".emacs" "*OCaml*" "foo.tex" "foo.ml" "foo.tex" ".emacs" "foo.tex" "*Warnings*" "nyan-music" "*Messages*" "*scratch*" "foo.tex" "*Latex Preview Pane Errors*" "latex-math" "foo.tex" "*eshell*" "foo.el" "mychart.tex" "foo.hs" ".emacs" "nyan-music" "foo.hs" "+new-snippet+" ".emacs" "template.hs" "template.c" "template.rb" "template.jl" "template.rb" "template.hs" "template.c" "foo.hs" "*compilation*" "6.hs" "*compilation*" "5.jl" ".emacs" "2.hs" "1.hs" "Euler_Project" "nyan-music" "main.jl" "*scratch*" "foo.jl" "mc_1.jl" ".emacs" "coins_sums.jl" ".emacs" "learn-you-a-haskell.hs" ".emacs" "foo.c" ".emacs" "transaction.py" "transaction_repository.py" "transactions.py" "login.py" "transactions.py" "user.py" "crud_saved_contact.py" "crud_user.py" "transaction_repository.py" "transaction.py" "README.md"))
(setq file-name-history '("~/.config/emacs/init.el" "~/Programming/Projs/Euler-Project/11/" "~/Programming/Projs/Euler-Project/10/10.jl" "~/Programming/Projs/Euler-Project/11/11.jl" "~/Programming/Projs/Euler-Project/" "~/foo.jl" "~/.config/emacs/init.el" "foo.jl" "~/.config/emacs/init.el" "~/foo.jl" "~/.config/emacs/init.el" "~/Programming/Projs/Euler-Project/10/10.hs" "~/Programming/Projs/Euler-Project/10/" "~/.config/emacs/init.el" "~/Programming/Projs/Euler-Project/10/10.hs" "~/Programming/Projs/Euler-Project/10/10.jl" "~/Programming/Projs/Euler-Project/7/7.hs" "~/Programming/Projs/Euler-Project/10/10.hs" "~/Programming/Projs/Euler-Project/10" "~/Programming/Projs/Euler-Project/11" "~/Programming/Projs/Euler-Project/" "~/.config/emacs/init.el" "~/bar.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/.config/emacs/snippets/haskell-mode/" "~/foo.hs" "~/.config/emacs/init.el" "foo.hs" "~/foo.hs" "~/.config/emacs/init.el" "foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/foo.ml" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/.config/emacs/snippets/haskell-mode/" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/.config/emacs/snippets/haskell-mode/haskell-mode" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/snippets/" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/.config/emacs/snippets/haskell-mode/" "~/.config/emacs/foo.hs" "~/.config/emacs/init.el" "~/foo.hs" "~/.config/emacs/init.el" "~/.emacs.bak" "~/.config/emacs/snippets/" "~/.config/emacs/snippets/haskell-mode/" "~/Programming/Projs/Euler-Project/9/9.hs" "~/Programming/Projs/Euler-Project/9" "~/Programming/Projs/Euler-Project/" "~/Programming/Projs/Lisp/Racket/" "~/.emacs" "~/Programming/Projs/Lisp/Racket/fizzbuzz.rkt" "~/Programming/Projs/Lisp/Racket" "~/Programming/Projs/" "~/Programming/Projs/li" "~/foo.ml" "~/.emacs" "~/foo.ml" "~/.emacs" "~/foo.ml" "~/.emacs" "~/foo.ml" "~/.emacs" "~/" "~/.emacs" "~/foo.hs" "~/.emacs" "~/foo.ml"))
(setq extended-command-history '("load-theme" "julia-repl" "julia-repl-send-buffer" "julia-repl" "package-install" "package-refresh-contents" "package-install" "load-theme" "replace-string" "load-file" "replace-string" "load-file" "file-name-shadow-mode" "load-file" "comment-box" "next-error" "load-file" "next-error" "load-file" "shell" "load-file" "insert-char" "load-file" "shell" "load-file" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "haskell-unicode-input-method-enable" "load-file" "prettify-symbols-mode" "load-file" "lisp-mode" "load-file" "elisp-byte-code-mode" "load-file" "prettify-symbols-mode" "load-file" "global-prettify-symbols-mode" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "load-file" "recover-this-file" "load-file" "haskell-unicode-input-method-enable" "load-file" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "load-file" "haskell-unicode-input-method-enable" "load-file" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "load-file" "prettify-symbols-mode" "global-prettify-symbols-mode" "load-file" "global-prettify-symbols-mode" "load-file" "global-prettify-symbols-mode" "prettify-symbols-mode" "load-file" "eval-buffer" "load-file" "prettify-symbols-mode" "run-haskell" "interactive-haskell-mode" "yas-expand" "racket-run" "recover-this-file" "load-file" "racket-run" "electric-pair-mode" "racket-run" "racket-mode" "package-install" "load-file" "compile" "load-file" "tuareg-mode" "tuareg" "tuareg-eval-buffer" "tuareg-eval-region" "tuareg-mode" "package-install" "load-file" "haskell-mode" "tuareg-mode" "tuareg" "load-file" "package-install" "load-file" "electric-pair-mode" "emacs-lisp-mode" "lisp-mode"))
